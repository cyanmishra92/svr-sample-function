-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_2_ce0 : STD_LOGIC;
    signal second_order_float_2_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_3_ce0 : STD_LOGIC;
    signal second_order_float_3_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_s_ce0 : STD_LOGIC;
    signal second_order_float_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal do_cos_read_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1171_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_reg_1178_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_fu_262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_reg_1184_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_1_fu_272_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_1191 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_1191_pp0_iter1_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1197_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_311_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_reg_1208 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_V_reg_1213 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_6_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1228_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_reg_1234 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_14_i_reg_1240 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_24_fu_379_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_24_reg_1245 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_24_reg_1245_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_8_fu_394_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_8_reg_1251 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_V_fu_445_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_zeros_V_reg_1256 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_V_reg_1262 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1262_pp0_iter9_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1262_pp0_iter10_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_reg_1262_pp0_iter11_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal Ex_V_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1269 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1269_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1269_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1269_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1269_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1269_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1274 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_fu_506_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_reg_1279 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1285 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1285_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1285_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1285_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1285_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1285_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1285_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1291_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1291_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1291_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1291_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1291_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1291_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1299 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1299_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1299_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1299_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1299_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_599_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_12_reg_1305 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_12_reg_1305_pp0_iter10_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i1_reg_1310 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_cond_42_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_42_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_42_reg_1330_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_42_reg_1330_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_42_reg_1330_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_42_reg_1330_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_42_reg_1330_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_45_fu_749_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_45_reg_1336 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_45_reg_1336_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_45_reg_1336_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_45_reg_1336_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_45_reg_1336_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_45_reg_1336_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_reg_1341 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_15_reg_1346 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_15_reg_1346_pp0_iter11_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal second_order_float_6_reg_1351 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_8_reg_1356 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_i_reg_1361 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_30_i_reg_1366 : STD_LOGIC_VECTOR (13 downto 0);
    signal Mx_V_read_assign_fu_816_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_read_assign_reg_1371 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_fu_837_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_reg_1376 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_V_reg_1381 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_20_i_reg_1387 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_i1_reg_1392 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i14_i_fu_961_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i14_i_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_i_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_i_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal newexp_fu_1008_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1418 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_i2_i_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal expv_op_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_288_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_296_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_i_i_fu_315_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_3_fu_318_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_20_fu_334_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (103 downto 0);
    signal tmp_16_fu_385_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_389_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_i3_i_fu_401_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_21_fu_411_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_22_fu_419_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_23_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i_fu_461_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_11_fu_464_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal storemerge_i_fu_454_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sh_cast_fu_488_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_i_fu_500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_527_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_22_i_fu_533_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_21_i_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast5_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_i_cast_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_555_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ssdm_int_V_write_ass_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_do_cos_i_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_589_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_24_fu_624_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_28_fu_639_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_645_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_683_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_43_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_13_fu_1157_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_1_fu_785_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_1_fu_785_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_1_fu_785_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_5_fu_1164_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_38_i_fu_822_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_39_i_fu_825_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_16_fu_828_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_41_i_cast_fu_834_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_17_fu_849_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_17_fu_849_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_17_fu_849_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Ex_V_ret_fu_885_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_41_fu_895_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_i1_fu_914_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_19_fu_902_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_26_fu_933_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_fu_921_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_27_fu_951_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i1_fu_969_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_fu_943_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_2_1_i_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_891_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i2_fu_998_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i2_cast_fu_1004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_1_i_fu_990_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_1027_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_29_1_i_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_1_i_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1046_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_11_fu_1056_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_cond_i_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_exp_V_fu_1079_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1043_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast_cast_fu_1072_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_44_fu_1091_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal not_or_cond_demorgan_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_1065_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_cond_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_cast_fu_1116_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal newSel1_fu_1128_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_3_fu_1099_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_4_fu_1136_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_29_fu_1144_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_13_fu_1157_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal OP1_V_3_fu_757_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_13_fu_1157_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_5_fu_1164_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_348_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to14 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_348_p00 : STD_LOGIC_VECTOR (103 downto 0);
    signal grp_fu_348_p10 : STD_LOGIC_VECTOR (103 downto 0);
    signal p_Val2_17_fu_849_p10 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_1_fu_785_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal p_Val2_5_fu_1164_p10 : STD_LOGIC_VECTOR (29 downto 0);

    component convert_mul_80ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (103 downto 0) );
    end component;


    component convert_mux_83_1_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convert_mux_164_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convert_mul_mul_1ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component convert_mul_mul_1jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sin_or_cos_float_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component sin_or_cos_float_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sin_or_cos_float_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sin_or_cos_float_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component sin_or_cos_float_bkb
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_2_U : component sin_or_cos_float_cud
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_2_address0,
        ce0 => second_order_float_2_ce0,
        q0 => second_order_float_2_q0);

    second_order_float_3_U : component sin_or_cos_float_dEe
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_3_address0,
        ce0 => second_order_float_3_ce0,
        q0 => second_order_float_3_q0);

    second_order_float_s_U : component sin_or_cos_float_eOg
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_s_address0,
        ce0 => second_order_float_s_ce0,
        q0 => second_order_float_s_q0);

    convert_mul_80ns_fYi_U1 : component convert_mul_80ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 104)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        din1 => grp_fu_348_p1,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p2);

    convert_mux_83_1_g8j_U2 : component convert_mux_83_1_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_24_reg_1245_pp0_iter8_reg,
        dout => tmp_fu_555_p10);

    convert_mux_164_1hbi_U3 : component convert_mux_164_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_28_fu_639_p3,
        dout => tmp_2_fu_645_p18);

    convert_mux_164_1hbi_U4 : component convert_mux_164_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_28_fu_639_p3,
        dout => tmp_3_fu_683_p18);

    convert_mul_mul_1ibs_U5 : component convert_mul_mul_1ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => p_Val2_13_fu_1157_p0,
        din1 => p_Val2_13_fu_1157_p1,
        dout => p_Val2_13_fu_1157_p2);

    convert_mul_mul_1jbC_U6 : component convert_mul_mul_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => second_order_float_8_reg_1356,
        din1 => p_Val2_5_fu_1164_p1,
        dout => p_Val2_5_fu_1164_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                Ex_V_reg_1269 <= Ex_V_fu_482_p2;
                Ex_V_reg_1269_pp0_iter10_reg <= Ex_V_reg_1269_pp0_iter9_reg;
                Ex_V_reg_1269_pp0_iter11_reg <= Ex_V_reg_1269_pp0_iter10_reg;
                Ex_V_reg_1269_pp0_iter12_reg <= Ex_V_reg_1269_pp0_iter11_reg;
                Ex_V_reg_1269_pp0_iter13_reg <= Ex_V_reg_1269_pp0_iter12_reg;
                Ex_V_reg_1269_pp0_iter9_reg <= Ex_V_reg_1269;
                Mx_V_read_assign_reg_1371 <= Mx_V_read_assign_fu_816_p3;
                Mx_V_reg_1262 <= p_Val2_11_fu_464_p2(57 downto 29);
                Mx_V_reg_1262_pp0_iter10_reg <= Mx_V_reg_1262_pp0_iter9_reg;
                Mx_V_reg_1262_pp0_iter11_reg <= Mx_V_reg_1262_pp0_iter10_reg;
                Mx_V_reg_1262_pp0_iter9_reg <= Mx_V_reg_1262;
                Mx_zeros_V_reg_1256 <= Mx_zeros_V_fu_445_p1;
                closepath_reg_1197_pp0_iter2_reg <= closepath_reg_1197_pp0_iter1_reg;
                closepath_reg_1197_pp0_iter3_reg <= closepath_reg_1197_pp0_iter2_reg;
                closepath_reg_1197_pp0_iter4_reg <= closepath_reg_1197_pp0_iter3_reg;
                closepath_reg_1197_pp0_iter5_reg <= closepath_reg_1197_pp0_iter4_reg;
                closepath_reg_1197_pp0_iter6_reg <= closepath_reg_1197_pp0_iter5_reg;
                closepath_reg_1197_pp0_iter7_reg <= closepath_reg_1197_pp0_iter6_reg;
                cos_basis_reg_1299 <= cos_basis_fu_582_p3;
                cos_basis_reg_1299_pp0_iter10_reg <= cos_basis_reg_1299;
                cos_basis_reg_1299_pp0_iter11_reg <= cos_basis_reg_1299_pp0_iter10_reg;
                cos_basis_reg_1299_pp0_iter12_reg <= cos_basis_reg_1299_pp0_iter11_reg;
                cos_basis_reg_1299_pp0_iter13_reg <= cos_basis_reg_1299_pp0_iter12_reg;
                do_cos_read_reg_1171_pp0_iter10_reg <= do_cos_read_reg_1171_pp0_iter9_reg;
                do_cos_read_reg_1171_pp0_iter11_reg <= do_cos_read_reg_1171_pp0_iter10_reg;
                do_cos_read_reg_1171_pp0_iter12_reg <= do_cos_read_reg_1171_pp0_iter11_reg;
                do_cos_read_reg_1171_pp0_iter13_reg <= do_cos_read_reg_1171_pp0_iter12_reg;
                do_cos_read_reg_1171_pp0_iter14_reg <= do_cos_read_reg_1171_pp0_iter13_reg;
                do_cos_read_reg_1171_pp0_iter2_reg <= do_cos_read_reg_1171_pp0_iter1_reg;
                do_cos_read_reg_1171_pp0_iter3_reg <= do_cos_read_reg_1171_pp0_iter2_reg;
                do_cos_read_reg_1171_pp0_iter4_reg <= do_cos_read_reg_1171_pp0_iter3_reg;
                do_cos_read_reg_1171_pp0_iter5_reg <= do_cos_read_reg_1171_pp0_iter4_reg;
                do_cos_read_reg_1171_pp0_iter6_reg <= do_cos_read_reg_1171_pp0_iter5_reg;
                do_cos_read_reg_1171_pp0_iter7_reg <= do_cos_read_reg_1171_pp0_iter6_reg;
                do_cos_read_reg_1171_pp0_iter8_reg <= do_cos_read_reg_1171_pp0_iter7_reg;
                do_cos_read_reg_1171_pp0_iter9_reg <= do_cos_read_reg_1171_pp0_iter8_reg;
                isNeg_reg_1274 <= Ex_V_fu_482_p2(7 downto 7);
                loc_V_reg_1184_pp0_iter2_reg <= loc_V_reg_1184_pp0_iter1_reg;
                loc_V_reg_1184_pp0_iter3_reg <= loc_V_reg_1184_pp0_iter2_reg;
                loc_V_reg_1184_pp0_iter4_reg <= loc_V_reg_1184_pp0_iter3_reg;
                loc_V_reg_1184_pp0_iter5_reg <= loc_V_reg_1184_pp0_iter4_reg;
                loc_V_reg_1184_pp0_iter6_reg <= loc_V_reg_1184_pp0_iter5_reg;
                loc_V_reg_1184_pp0_iter7_reg <= loc_V_reg_1184_pp0_iter6_reg;
                newexp_reg_1413 <= newexp_fu_1008_p2;
                or_cond_42_reg_1330 <= or_cond_42_fu_729_p2;
                or_cond_42_reg_1330_pp0_iter10_reg <= or_cond_42_reg_1330;
                or_cond_42_reg_1330_pp0_iter11_reg <= or_cond_42_reg_1330_pp0_iter10_reg;
                or_cond_42_reg_1330_pp0_iter12_reg <= or_cond_42_reg_1330_pp0_iter11_reg;
                or_cond_42_reg_1330_pp0_iter13_reg <= or_cond_42_reg_1330_pp0_iter12_reg;
                or_cond_42_reg_1330_pp0_iter14_reg <= or_cond_42_reg_1330_pp0_iter13_reg;
                p_Result_19_reg_1178_pp0_iter2_reg <= p_Result_19_reg_1178_pp0_iter1_reg;
                p_Result_19_reg_1178_pp0_iter3_reg <= p_Result_19_reg_1178_pp0_iter2_reg;
                p_Result_19_reg_1178_pp0_iter4_reg <= p_Result_19_reg_1178_pp0_iter3_reg;
                p_Result_19_reg_1178_pp0_iter5_reg <= p_Result_19_reg_1178_pp0_iter4_reg;
                p_Result_19_reg_1178_pp0_iter6_reg <= p_Result_19_reg_1178_pp0_iter5_reg;
                p_Result_19_reg_1178_pp0_iter7_reg <= p_Result_19_reg_1178_pp0_iter6_reg;
                p_Result_19_reg_1178_pp0_iter8_reg <= p_Result_19_reg_1178_pp0_iter7_reg;
                p_Result_20_i_reg_1387 <= p_Val2_17_fu_849_p2(57 downto 42);
                p_Result_i1_reg_1392 <= p_Val2_17_fu_849_p2(41 downto 29);
                p_Result_s_45_reg_1336 <= p_Result_s_45_fu_749_p3;
                p_Result_s_45_reg_1336_pp0_iter10_reg <= p_Result_s_45_reg_1336;
                p_Result_s_45_reg_1336_pp0_iter11_reg <= p_Result_s_45_reg_1336_pp0_iter10_reg;
                p_Result_s_45_reg_1336_pp0_iter12_reg <= p_Result_s_45_reg_1336_pp0_iter11_reg;
                p_Result_s_45_reg_1336_pp0_iter13_reg <= p_Result_s_45_reg_1336_pp0_iter12_reg;
                p_Result_s_45_reg_1336_pp0_iter14_reg <= p_Result_s_45_reg_1336_pp0_iter13_reg;
                p_Val2_12_reg_1305 <= p_Val2_12_fu_599_p1;
                p_Val2_12_reg_1305_pp0_iter10_reg <= p_Val2_12_reg_1305;
                p_Val2_15_reg_1346 <= second_order_float_2_q0(29 downto 1);
                p_Val2_15_reg_1346_pp0_iter11_reg <= p_Val2_15_reg_1346;
                p_Val2_24_reg_1245 <= p_Val2_24_fu_379_p3;
                p_Val2_24_reg_1245_pp0_iter8_reg <= p_Val2_24_reg_1245;
                p_Val2_6_reg_1234 <= grp_fu_348_p2(76 downto 19);
                p_Val2_8_reg_1251 <= p_Val2_8_fu_394_p3;
                r_V_reg_1376 <= r_V_fu_837_p2;
                result_V_reg_1381 <= p_Val2_17_fu_849_p2(57 downto 29);
                second_order_float_6_reg_1351 <= second_order_float_3_q0;
                second_order_float_8_reg_1356 <= second_order_float_s_q0;
                sh_assign_reg_1279 <= sh_assign_fu_506_p3;
                tmp_12_i_reg_1423 <= tmp_12_i_fu_1022_p2;
                tmp_21_reg_1418 <= newexp_fu_1008_p2(31 downto 31);
                tmp_28_i_reg_1361 <= p_Val2_1_fu_785_p2(44 downto 23);
                tmp_30_i_reg_1366 <= p_Val2_5_fu_1164_p2(29 downto 16);
                tmp_32_i_reg_1402 <= tmp_32_i_fu_972_p2;
                tmp_33_i_reg_1408 <= tmp_33_i_fu_978_p2;
                tmp_35_i_reg_1341 <= p_Val2_13_fu_1157_p2(29 downto 15);
                tmp_5_reg_1285 <= tmp_5_fu_514_p2;
                tmp_5_reg_1285_pp0_iter10_reg <= tmp_5_reg_1285_pp0_iter9_reg;
                tmp_5_reg_1285_pp0_iter11_reg <= tmp_5_reg_1285_pp0_iter10_reg;
                tmp_5_reg_1285_pp0_iter12_reg <= tmp_5_reg_1285_pp0_iter11_reg;
                tmp_5_reg_1285_pp0_iter13_reg <= tmp_5_reg_1285_pp0_iter12_reg;
                tmp_5_reg_1285_pp0_iter14_reg <= tmp_5_reg_1285_pp0_iter13_reg;
                tmp_5_reg_1285_pp0_iter9_reg <= tmp_5_reg_1285;
                tmp_6_reg_1228 <= tmp_6_fu_354_p2;
                tmp_6_reg_1228_pp0_iter10_reg <= tmp_6_reg_1228_pp0_iter9_reg;
                tmp_6_reg_1228_pp0_iter11_reg <= tmp_6_reg_1228_pp0_iter10_reg;
                tmp_6_reg_1228_pp0_iter12_reg <= tmp_6_reg_1228_pp0_iter11_reg;
                tmp_6_reg_1228_pp0_iter13_reg <= tmp_6_reg_1228_pp0_iter12_reg;
                tmp_6_reg_1228_pp0_iter14_reg <= tmp_6_reg_1228_pp0_iter13_reg;
                tmp_6_reg_1228_pp0_iter3_reg <= tmp_6_reg_1228;
                tmp_6_reg_1228_pp0_iter4_reg <= tmp_6_reg_1228_pp0_iter3_reg;
                tmp_6_reg_1228_pp0_iter5_reg <= tmp_6_reg_1228_pp0_iter4_reg;
                tmp_6_reg_1228_pp0_iter6_reg <= tmp_6_reg_1228_pp0_iter5_reg;
                tmp_6_reg_1228_pp0_iter7_reg <= tmp_6_reg_1228_pp0_iter6_reg;
                tmp_6_reg_1228_pp0_iter8_reg <= tmp_6_reg_1228_pp0_iter7_reg;
                tmp_6_reg_1228_pp0_iter9_reg <= tmp_6_reg_1228_pp0_iter8_reg;
                tmp_7_reg_1291 <= tmp_7_fu_519_p2;
                tmp_7_reg_1291_pp0_iter10_reg <= tmp_7_reg_1291_pp0_iter9_reg;
                tmp_7_reg_1291_pp0_iter11_reg <= tmp_7_reg_1291_pp0_iter10_reg;
                tmp_7_reg_1291_pp0_iter12_reg <= tmp_7_reg_1291_pp0_iter11_reg;
                tmp_7_reg_1291_pp0_iter13_reg <= tmp_7_reg_1291_pp0_iter12_reg;
                tmp_7_reg_1291_pp0_iter14_reg <= tmp_7_reg_1291_pp0_iter13_reg;
                tmp_7_reg_1291_pp0_iter9_reg <= tmp_7_reg_1291;
                tmp_i14_i_reg_1397 <= tmp_i14_i_fu_961_p3;
                tmp_i1_reg_1310 <= ssdm_int_V_write_ass_fu_548_p3(21 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then
                Med_V_reg_1213 <= r_V_3_fu_318_p2(99 downto 20);
                closepath_reg_1197 <= closepath_fu_276_p2;
                closepath_reg_1197_pp0_iter1_reg <= closepath_reg_1197;
                do_cos_read_reg_1171 <= (0=>do_cos, others=>'-');
                do_cos_read_reg_1171_pp0_iter1_reg <= do_cos_read_reg_1171;
                loc_V_1_reg_1191 <= loc_V_1_fu_272_p1;
                loc_V_1_reg_1191_pp0_iter1_reg <= loc_V_1_reg_1191;
                loc_V_reg_1184 <= p_Val2_s_fu_250_p1(30 downto 23);
                loc_V_reg_1184_pp0_iter1_reg <= loc_V_reg_1184;
                p_Result_19_reg_1178 <= p_Val2_s_fu_250_p1(31 downto 31);
                p_Result_19_reg_1178_pp0_iter1_reg <= p_Result_19_reg_1178;
                tmp_15_reg_1208 <= tmp_15_fu_311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (closepath_reg_1197_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce))) then
                tmp_14_i_reg_1240 <= grp_fu_348_p2(79 downto 77);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Ex_V_fu_482_p2 <= std_logic_vector(unsigned(storemerge_i_fu_454_p3) - unsigned(tmp_18_i_fu_479_p1));
    Mx_V_read_assign_fu_816_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1299_pp0_iter11_reg(0) = '1') else 
        Mx_V_reg_1262_pp0_iter11_reg;
    Mx_zeros_V_fu_445_p1 <= val_assign_fu_437_p3(5 - 1 downto 0);
    OP1_V_3_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_reg_1310),30));
    addr_V_fu_288_p3 <= 
        ap_const_lv8_3F when (closepath_fu_276_p2(0) = '1') else 
        expv_op_fu_282_p2;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to14_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to14 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to14)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to14 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_29_fu_1144_p4;
    closepath_fu_276_p2 <= "1" when (unsigned(loc_V_fu_262_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_582_p3 <= 
        tmp_s_fu_576_p2 when (do_cos_read_reg_1171_pp0_iter8_reg(0) = '1') else 
        tmp_fu_555_p10;
    expv_op_fu_282_p2 <= std_logic_vector(signed(ap_const_lv8_C2) + signed(loc_V_fu_262_p4));

    grp_fu_348_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            grp_fu_348_ce <= ap_const_logic_1;
        else 
            grp_fu_348_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_348_p0 <= grp_fu_348_p00(80 - 1 downto 0);
    grp_fu_348_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Med_V_reg_1213),104));
    grp_fu_348_p1 <= grp_fu_348_p10(24 - 1 downto 0);
    grp_fu_348_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_334_p3),104));
    isNeg_fu_492_p3 <= Ex_V_fu_482_p2(7 downto 7);
    loc_V_1_fu_272_p1 <= p_Val2_s_fu_250_p1(23 - 1 downto 0);
    loc_V_fu_262_p4 <= p_Val2_s_fu_250_p1(30 downto 23);
    newSel1_fu_1128_p3 <= 
        ap_const_lv23_0 when (or_cond_i_fu_1039_p2(0) = '1') else 
        tmp_12_fu_1065_p3;
    newSel_cast_fu_1116_p3 <= 
        ap_const_lv23_7FFFFF when (not_or_cond_fu_1110_p2(0) = '1') else 
        ap_const_lv23_0;
    newexp_fu_1008_p2 <= std_logic_vector(signed(tmp_i2_cast_fu_1004_p1) - signed(shift_1_i_fu_990_p3));
    not_do_cos_i_fu_613_p2 <= (do_cos_read_reg_1171_pp0_iter8_reg xor ap_const_lv1_1);
    not_or_cond_demorgan_fu_1106_p2 <= (tmp_6_reg_1228_pp0_iter14_reg and tmp_5_reg_1285_pp0_iter14_reg);
    not_or_cond_fu_1110_p2 <= (not_or_cond_demorgan_fu_1106_p2 xor ap_const_lv1_1);
    or_cond_42_fu_729_p2 <= (tmp_6_reg_1228_pp0_iter8_reg and tmp_5_reg_1285);
    or_cond_fu_1124_p2 <= (tmp_7_reg_1291_pp0_iter14_reg or or_cond_42_reg_1330_pp0_iter14_reg);
    or_cond_i_fu_1039_p2 <= (tmp_21_reg_1418 or tmp_12_i_reg_1423);
    out_exp_V_fu_1079_p3 <= 
        ap_const_lv8_FF when (tmp_7_reg_1291_pp0_iter14_reg(0) = '1') else 
        ap_const_lv8_0;
    p_Ex_V_ret_fu_885_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1299_pp0_iter13_reg(0) = '1') else 
        Ex_V_reg_1269_pp0_iter13_reg;
    p_Result_20_fu_334_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1191_pp0_iter1_reg);
    p_Result_21_fu_411_p3 <= (p_Result_i3_i_fu_401_p4 & ap_const_lv1_1);
    
    p_Result_22_fu_419_p4_proc : process(p_Result_21_fu_411_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_22_fu_419_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_21_fu_411_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_22_fu_419_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_22_fu_419_p4_i) := p_Result_21_fu_411_p3(30-1-p_Result_22_fu_419_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_22_fu_419_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Result_23_fu_429_p3 <= (ap_const_lv2_3 & p_Result_22_fu_419_p4);
    p_Result_24_fu_624_p3 <= (sin_basis_fu_618_p2 & p_Result_i_fu_589_p4);
    p_Result_25_fu_921_p5 <= (tmp_15_i1_fu_914_p3 & ap_const_lv32_0(17 downto 0));
    
    p_Result_26_fu_933_p4_proc : process(p_Val2_19_fu_902_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_26_fu_933_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_19_fu_902_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_26_fu_933_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_26_fu_933_p4_i) := p_Val2_19_fu_902_p5(32-1-p_Result_26_fu_933_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_26_fu_933_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_27_fu_951_p4_proc : process(p_Result_25_fu_921_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_27_fu_951_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_25_fu_921_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_27_fu_951_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_27_fu_951_p4_i) := p_Result_25_fu_921_p5(32-1-p_Result_27_fu_951_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_27_fu_951_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_28_fu_639_p3 <= (p_Result_19_reg_1178_pp0_iter8_reg & p_Val2_24_reg_1245_pp0_iter8_reg);
    p_Result_29_fu_1144_p4 <= ((p_Result_s_45_reg_1336_pp0_iter14_reg & ret_V_3_fu_1099_p3) & ret_V_4_fu_1136_p3);
    p_Result_i3_i_fu_401_p4 <= p_Val2_8_fu_394_p3(57 downto 29);
    p_Result_i_fu_589_p4 <= ssdm_int_V_write_ass_fu_548_p3(28 downto 22);
    p_Result_s_43_fu_743_p2 <= (tmp_8_fu_738_p2 and tmp_4_fu_721_p3);
    p_Result_s_44_fu_1091_p3 <= 
        out_exp_V_fu_1079_p3 when (tmp_9_fu_1086_p2(0) = '1') else 
        tmp_22_fu_1043_p1;
    p_Result_s_45_fu_749_p3 <= 
        p_Result_s_fu_733_p2 when (or_cond_42_fu_729_p2(0) = '1') else 
        p_Result_s_43_fu_743_p2;
    p_Result_s_fu_733_p2 <= (p_Result_19_reg_1178_pp0_iter8_reg and not_do_cos_i_fu_613_p2);
    p_Val2_11_fu_464_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_8_reg_1251),to_integer(unsigned('0' & tmp_15_i_fu_461_p1(31-1 downto 0)))));
    p_Val2_12_fu_599_p1 <= ssdm_int_V_write_ass_fu_548_p3(22 - 1 downto 0);
    p_Val2_13_fu_1157_p0 <= OP1_V_3_fu_757_p1(15 - 1 downto 0);
    p_Val2_13_fu_1157_p1 <= OP1_V_3_fu_757_p1(15 - 1 downto 0);
    p_Val2_16_fu_828_p2 <= std_logic_vector(signed(tmp_38_i_fu_822_p1) + signed(tmp_39_i_fu_825_p1));
    p_Val2_17_fu_849_p0 <= r_V_reg_1376;
    p_Val2_17_fu_849_p1 <= p_Val2_17_fu_849_p10(29 - 1 downto 0);
    p_Val2_17_fu_849_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_reg_1371),59));
    p_Val2_17_fu_849_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_17_fu_849_p0) * signed('0' &p_Val2_17_fu_849_p1))), 59));
    p_Val2_19_fu_902_p5 <= (tmp_i1_41_fu_895_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_1_fu_785_p0 <= second_order_float_6_reg_1351;
    p_Val2_1_fu_785_p1 <= p_Val2_1_fu_785_p10(22 - 1 downto 0);
    p_Val2_1_fu_785_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_12_reg_1305_pp0_iter10_reg),45));
    p_Val2_1_fu_785_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_785_p0) * signed('0' &p_Val2_1_fu_785_p1))), 45));
    p_Val2_24_fu_379_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1197_pp0_iter6_reg(0) = '1') else 
        tmp_14_i_reg_1240;
    p_Val2_5_fu_1164_p1 <= p_Val2_5_fu_1164_p10(15 - 1 downto 0);
    p_Val2_5_fu_1164_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_i_reg_1341),30));
    p_Val2_8_fu_394_p3 <= 
        p_Val2_i_fu_389_p2 when (tmp_16_fu_385_p1(0) = '1') else 
        p_Val2_6_reg_1234;
    p_Val2_i_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(p_Val2_6_reg_1234));
    p_Val2_s_fu_250_p1 <= t_in;
    p_cast_cast_fu_1072_p3 <= 
        ap_const_lv8_7F when (do_cos_read_reg_1171_pp0_iter14_reg(0) = '1') else 
        ap_const_lv8_0;
    p_i_fu_449_p2 <= std_logic_vector(signed(ap_const_lv8_83) + signed(loc_V_reg_1184_pp0_iter7_reg));
    r_V_3_fu_318_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & tmp_1_i_i_fu_315_p1(31-1 downto 0)))));
    r_V_fu_837_p2 <= std_logic_vector(unsigned(p_Val2_16_fu_828_p2) + unsigned(tmp_41_i_cast_fu_834_p1));
    ref_4oPi_table_100_V_address0 <= tmp_i2_i_fu_306_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_3_fu_1099_p3 <= 
        p_cast_cast_fu_1072_p3 when (or_cond_42_reg_1330_pp0_iter14_reg(0) = '1') else 
        p_Result_s_44_fu_1091_p3;
    ret_V_4_fu_1136_p3 <= 
        newSel_cast_fu_1116_p3 when (or_cond_fu_1124_p2(0) = '1') else 
        newSel1_fu_1128_p3;
        rhs_V_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Ex_V_ret_fu_885_p3),9));

    second_order_float_2_address0 <= tmp_36_i_fu_632_p1(8 - 1 downto 0);

    second_order_float_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_2_ce0 <= ap_const_logic_1;
        else 
            second_order_float_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_3_address0 <= tmp_36_i_fu_632_p1(8 - 1 downto 0);

    second_order_float_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_3_ce0 <= ap_const_logic_1;
        else 
            second_order_float_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_s_address0 <= tmp_36_i_fu_632_p1(8 - 1 downto 0);

    second_order_float_s_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            second_order_float_s_ce0 <= ap_const_logic_1;
        else 
            second_order_float_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_1_cast5_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_reg_1279),32));

        sh_assign_1_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_reg_1279),29));

    sh_assign_fu_506_p3 <= 
        tmp_20_i_fu_500_p2 when (isNeg_fu_492_p3(0) = '1') else 
        sh_cast_fu_488_p1;
        sh_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_482_p2),9));

    shift_1_i_fu_990_p3 <= 
        shift_2_1_i_fu_984_p2 when (tmp_33_i_fu_978_p2(0) = '1') else 
        tmp_i_i1_fu_943_p3;
    shift_2_1_i_fu_984_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(tmp_i14_i_fu_961_p3));
    sin_basis_fu_618_p2 <= (tmp_fu_555_p10 xor not_do_cos_i_fu_613_p2);
    ssdm_int_V_write_ass_fu_548_p3 <= 
        tmp_22_i_cast_fu_538_p1 when (isNeg_reg_1274(0) = '1') else 
        tmp_23_i_fu_542_p2;
    storemerge_i_fu_454_p3 <= 
        p_i_fu_449_p2 when (closepath_reg_1197_pp0_iter7_reg(0) = '1') else 
        ap_const_lv8_0;
    tmp_10_fu_1046_p4 <= tmp_32_1_i_fu_1034_p2(27 downto 5);
    tmp_11_fu_1056_p4 <= tmp_32_i_reg_1402(27 downto 5);
    tmp_12_fu_1065_p3 <= 
        tmp_10_fu_1046_p4 when (tmp_33_i_reg_1408(0) = '1') else 
        tmp_11_fu_1056_p4;
    tmp_12_i_fu_1022_p2 <= "1" when (result_V_reg_1381 = ap_const_lv29_0) else "0";
    tmp_15_fu_311_p1 <= addr_V_fu_288_p3(4 - 1 downto 0);
    tmp_15_i1_fu_914_p3 <= (p_Result_i1_reg_1392 & ap_const_lv1_1);
    tmp_15_i_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1256),58));
    tmp_16_fu_385_p1 <= p_Val2_24_fu_379_p3(1 - 1 downto 0);
    tmp_18_i_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1256),8));
    tmp_1_fu_296_p4 <= addr_V_fu_288_p3(7 downto 4);
    tmp_1_i_i_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_1208),100));
    tmp_20_fu_1027_p1 <= tmp_32_i_reg_1402(29 - 1 downto 0);
    tmp_20_i_fu_500_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_cast_fu_488_p1));
    tmp_21_i_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_1262),32));
    tmp_22_fu_1043_p1 <= newexp_reg_1413(8 - 1 downto 0);
    tmp_22_i_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_i_fu_533_p2),32));
    tmp_22_i_fu_533_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1262),to_integer(unsigned('0' & sh_assign_1_cast_fu_527_p1(29-1 downto 0)))));
    tmp_23_i_fu_542_p2 <= std_logic_vector(shift_left(unsigned(tmp_21_i_fu_530_p1),to_integer(unsigned('0' & sh_assign_1_cast5_fu_524_p1(31-1 downto 0)))));
    tmp_29_1_i_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_1027_p1),32));
    tmp_29_i1_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_reg_1381),32));
    tmp_32_1_i_fu_1034_p2 <= std_logic_vector(shift_left(unsigned(tmp_29_1_i_fu_1030_p1),to_integer(unsigned('0' & tmp_i14_i_reg_1397(31-1 downto 0)))));
    tmp_32_i_fu_972_p2 <= std_logic_vector(shift_left(unsigned(tmp_29_i1_fu_969_p1),to_integer(unsigned('0' & tmp_i_i1_fu_943_p3(31-1 downto 0)))));
    tmp_33_i_fu_978_p2 <= "1" when (tmp_i_i1_fu_943_p3 = ap_const_lv32_10) else "0";
    tmp_36_i_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_24_fu_624_p3),64));
        tmp_38_i_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_reg_1346_pp0_iter11_reg),30));

        tmp_39_i_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_i_reg_1361),30));

        tmp_41_i_cast_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_i_reg_1366),30));

    tmp_4_fu_721_p3 <= 
        tmp_2_fu_645_p18 when (cos_basis_fu_582_p3(0) = '1') else 
        tmp_3_fu_683_p18;
    tmp_5_fu_514_p2 <= "1" when (loc_V_reg_1184_pp0_iter7_reg = ap_const_lv8_0) else "0";
    tmp_6_fu_354_p2 <= "1" when (loc_V_1_reg_1191_pp0_iter1_reg = ap_const_lv23_0) else "0";
    tmp_7_fu_519_p2 <= "1" when (loc_V_reg_1184_pp0_iter7_reg = ap_const_lv8_FF) else "0";
    tmp_8_fu_738_p2 <= (tmp_7_reg_1291 xor ap_const_lv1_1);
    tmp_9_fu_1086_p2 <= (tmp_7_reg_1291_pp0_iter14_reg or or_cond_i_fu_1039_p2);
    
    tmp_i14_i_fu_961_p3_proc : process(p_Result_27_fu_951_p4)
    begin
        tmp_i14_i_fu_961_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_27_fu_951_p4(i) = '1' then
                tmp_i14_i_fu_961_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_i1_41_fu_895_p3 <= (p_Result_20_i_reg_1387 & ap_const_lv1_1);
        tmp_i2_cast_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i2_fu_998_p2),32));

    tmp_i2_fu_998_p2 <= std_logic_vector(unsigned(ap_const_lv9_7F) + unsigned(rhs_V_fu_891_p1));
    tmp_i2_i_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_296_p4),64));
    
    tmp_i_i1_fu_943_p3_proc : process(p_Result_26_fu_933_p4)
    begin
        tmp_i_i1_fu_943_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_26_fu_933_p4(i) = '1' then
                tmp_i_i1_fu_943_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_s_fu_576_p2 <= (tmp_fu_555_p10 xor ap_const_lv1_1);
    
    val_assign_fu_437_p3_proc : process(p_Result_23_fu_429_p3)
    begin
        val_assign_fu_437_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_23_fu_429_p3(i) = '1' then
                val_assign_fu_437_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

end behav;
