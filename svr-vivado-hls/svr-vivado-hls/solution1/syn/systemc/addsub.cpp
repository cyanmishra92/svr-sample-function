// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "addsub.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic addsub::ap_const_logic_1 = sc_dt::Log_1;
const bool addsub::ap_const_boolean_1 = true;
const sc_logic addsub::ap_const_logic_0 = sc_dt::Log_0;

addsub::addsub(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( r_V_10_fu_54_p0 );
    sensitive << ( r_V_fu_48_p2 );
    sensitive << ( r_V_2_fu_42_p2 );

    SC_METHOD(thread_r_V_10_fu_54_p0);
    sensitive << ( add );

    SC_METHOD(thread_r_V_2_fu_42_p2);
    sensitive << ( tmp_fu_34_p1 );
    sensitive << ( tmp_s_fu_38_p1 );

    SC_METHOD(thread_r_V_fu_48_p2);
    sensitive << ( tmp_fu_34_p1 );
    sensitive << ( tmp_s_fu_38_p1 );

    SC_METHOD(thread_tmp_fu_34_p1);
    sensitive << ( a_V );

    SC_METHOD(thread_tmp_s_fu_38_p1);
    sensitive << ( b_V );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "addsub_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, add, "(port)add");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_34_p1, "tmp_fu_34_p1");
    sc_trace(mVcdFile, tmp_s_fu_38_p1, "tmp_s_fu_38_p1");
    sc_trace(mVcdFile, r_V_10_fu_54_p0, "r_V_10_fu_54_p0");
    sc_trace(mVcdFile, r_V_fu_48_p2, "r_V_fu_48_p2");
    sc_trace(mVcdFile, r_V_2_fu_42_p2, "r_V_2_fu_42_p2");
#endif

    }
}

addsub::~addsub() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void addsub::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void addsub::thread_ap_return() {
    ap_return = (!r_V_10_fu_54_p0.read()[0].is_01())? sc_lv<44>(): ((r_V_10_fu_54_p0.read()[0].to_bool())? r_V_fu_48_p2.read(): r_V_2_fu_42_p2.read());
}

void addsub::thread_r_V_10_fu_54_p0() {
    r_V_10_fu_54_p0 =  (sc_lv<1>) (add.read());
}

void addsub::thread_r_V_2_fu_42_p2() {
    r_V_2_fu_42_p2 = (!tmp_fu_34_p1.read().is_01() || !tmp_s_fu_38_p1.read().is_01())? sc_lv<44>(): (sc_bigint<44>(tmp_fu_34_p1.read()) - sc_bigint<44>(tmp_s_fu_38_p1.read()));
}

void addsub::thread_r_V_fu_48_p2() {
    r_V_fu_48_p2 = (!tmp_s_fu_38_p1.read().is_01() || !tmp_fu_34_p1.read().is_01())? sc_lv<44>(): (sc_bigint<44>(tmp_s_fu_38_p1.read()) + sc_bigint<44>(tmp_fu_34_p1.read()));
}

void addsub::thread_tmp_fu_34_p1() {
    tmp_fu_34_p1 = esl_sext<44,43>(a_V.read());
}

void addsub::thread_tmp_s_fu_38_p1() {
    tmp_s_fu_38_p1 = esl_sext<44,43>(b_V.read());
}

}

