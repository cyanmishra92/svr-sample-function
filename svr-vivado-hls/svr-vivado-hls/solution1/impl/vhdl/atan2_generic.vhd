-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity atan2_generic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_in : IN STD_LOGIC_VECTOR (63 downto 0);
    x_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of atan2_generic is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv86_0 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_1B : STD_LOGIC_VECTOR (11 downto 0) := "000000011011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_58 : STD_LOGIC_VECTOR (6 downto 0) := "1011000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FFFFFFCC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv7_56 : STD_LOGIC_VECTOR (6 downto 0) := "1010110";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv87_7FFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (86 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_ctab_table_12_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_ctab_table_12_ce0 : STD_LOGIC;
    signal cordic_ctab_table_12_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal loc_V_4_fu_220_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_4_reg_818 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_s_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_V_fu_274_p4 : STD_LOGIC_VECTOR (85 downto 0);
    signal y_V_reg_830 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_18_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_fu_290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_cast_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_326_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal sel_tmp_reg_850 : STD_LOGIC_VECTOR (85 downto 0);
    signal x_V_cast_fu_343_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_22_ph_fu_372_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal k_fu_386_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_868 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_s_V_fu_396_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal y_s_V_reg_873 : STD_LOGIC_VECTOR (88 downto 0);
    signal exitcond_i_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_V_fu_402_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal x_s_V_reg_879 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_28_fu_419_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_28_reg_893 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_24_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tx_V_fu_443_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal tx_V_reg_903 : STD_LOGIC_VECTOR (88 downto 0);
    signal ty_V_fu_461_p3 : STD_LOGIC_VECTOR (88 downto 0);
    signal ty_V_reg_908 : STD_LOGIC_VECTOR (88 downto 0);
    signal p_Val2_42_fu_491_p2 : STD_LOGIC_VECTOR (84 downto 0);
    signal p_Val2_42_reg_913 : STD_LOGIC_VECTOR (84 downto 0);
    signal tz_V_fu_512_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal isneg_fu_519_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_187_s_fu_527_p3 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_187_s_reg_929 : STD_LOGIC_VECTOR (85 downto 0);
    signal NZeros_i_1_i_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal NZeros_i_1_i_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_614_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_81_reg_940 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_34_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_660_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_83_reg_963 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_84_fu_664_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_84_reg_971 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_92_fu_714_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_92_reg_977 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_95_fu_724_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_95_reg_982 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_39_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal dp_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_1002 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal p_Val2_s_reg_141 : STD_LOGIC_VECTOR (85 downto 0);
    signal p_Val2_1_reg_153 : STD_LOGIC_VECTOR (88 downto 0);
    signal p_Val2_37_reg_163 : STD_LOGIC_VECTOR (88 downto 0);
    signal sh_assign_2_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_p_s_phi_fu_188_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_s_reg_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_26_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_33_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_34_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_5_fu_228_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_242_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal loc_V_fu_210_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_246_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_252_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal loc_V_6_fu_238_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal r_V_1_fu_268_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_fu_298_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_304_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_cast_fu_316_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_23_fu_320_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal x_V_fu_334_p4 : STD_LOGIC_VECTOR (85 downto 0);
    signal y_V_cast_fu_347_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_21_fu_350_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal sel_tmp1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_353_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal sel_tmp_cast_fu_359_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_25_fu_392_p1 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_3_i_fu_433_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_i_fu_438_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_i1_fu_456_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal r_V_2_i_fu_451_p2 : STD_LOGIC_VECTOR (88 downto 0);
    signal tmp_77_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_cast_fu_487_p1 : STD_LOGIC_VECTOR (84 downto 0);
    signal p_Val2_2_cast_fu_469_p4 : STD_LOGIC_VECTOR (84 downto 0);
    signal p_Val2_43_cast_fu_497_p1 : STD_LOGIC_VECTOR (85 downto 0);
    signal r_V_4_i_fu_500_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal r_V_i2_fu_506_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal tmp_16_fu_534_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_548_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_fu_566_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_39_fu_576_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_588_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal NZeros_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_640_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_668_p1 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_86_fu_681_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_88_fu_690_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_85_fu_671_p4 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_87_fu_685_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_89_fu_694_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_91_fu_708_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_90_fu_701_p3 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_93_fu_720_p1 : STD_LOGIC_VECTOR (86 downto 0);
    signal p_Repl2_27_trunc_fu_740_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_94_fu_754_p1 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_96_fu_757_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal p_Result_s_53_fu_763_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal tmp_41_fu_772_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal man_V_fu_768_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_42_fu_778_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal man_V_2_fu_782_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_40_fu_745_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_41_fu_788_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_V_fu_797_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component convert_ddiv_64nsrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component atan2_generic_corqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;



begin
    cordic_ctab_table_12_U : component atan2_generic_corqcK
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_ctab_table_12_address0,
        ce0 => cordic_ctab_table_12_ce0,
        q0 => cordic_ctab_table_12_q0);

    convert_ddiv_64nsrcU_U34 : component convert_ddiv_64nsrcU
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_in,
        din1 => x_in,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_return_preg <= ap_phi_mux_p_s_phi_fu_188_p8;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_1_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_1_reg_153 <= p_Val2_22_ph_fu_372_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_1_reg_153 <= ty_V_reg_908;
            end if; 
        end if;
    end process;

    p_Val2_37_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_37_reg_163 <= x_V_cast_fu_343_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_37_reg_163 <= tx_V_reg_903;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_Val2_s_reg_141 <= ap_const_lv86_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                p_Val2_s_reg_141 <= tz_V_fu_512_p3;
            end if; 
        end if;
    end process;

    p_s_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_s_reg_184 <= dp_fu_804_p1;
            elsif ((((tmp_18_fu_262_p2 = ap_const_lv1_1) and (tmp_s_fu_256_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_24_fu_413_p2 = ap_const_lv1_1) and (exitcond_i_fu_380_p2 = ap_const_lv1_1)))) then 
                p_s_reg_184 <= ap_const_lv64_0;
            elsif (((tmp_s_reg_823 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                p_s_reg_184 <= tmp_i_reg_1002;
            end if; 
        end if;
    end process;

    sh_assign_2_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                sh_assign_2_reg_173 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sh_assign_2_reg_173 <= k_reg_868;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                NZeros_i_1_i_reg_934 <= NZeros_i_1_i_fu_606_p3;
                isneg_reg_923 <= p_Val2_s_reg_141(85 downto 85);
                tmp_187_s_reg_929 <= tmp_187_s_fu_527_p3;
                tmp_81_reg_940 <= tmp_81_fu_614_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_18_fu_262_p2 = ap_const_lv1_0) and (tmp_s_fu_256_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                isNeg_reg_840 <= r_V_1_fu_268_p2(11 downto 11);
                sel_tmp_reg_850 <= sel_tmp_fu_326_p3;
                sh_assign_3_cast_reg_845 <= sh_assign_3_cast_fu_312_p1;
                tmp_19_reg_835 <= tmp_19_fu_284_p2;
                    y_V_reg_830(84 downto 33) <= y_V_fu_274_p4(84 downto 33);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_reg_945 <= j_fu_618_p2;
                tmp_34_reg_951 <= tmp_34_fu_623_p2;
                tmp_82_reg_956 <= tmp_82_fu_654_p2;
                tmp_83_reg_963 <= tmp_83_fu_660_p1;
                tmp_84_reg_971 <= tmp_84_fu_664_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_868 <= k_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                loc_V_4_reg_818 <= loc_V_4_fu_220_p1;
                tmp_s_reg_823 <= tmp_s_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_42_reg_913 <= p_Val2_42_fu_491_p2;
                tmp_reg_898 <= p_Val2_1_reg_153(88 downto 88);
                tx_V_reg_903 <= tx_V_fu_443_p3;
                ty_V_reg_908 <= ty_V_fu_461_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_24_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_fu_380_p2 = ap_const_lv1_1))) then
                tmp_28_reg_893 <= tmp_28_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_reg_951 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_39_reg_987 <= tmp_39_fu_730_p2;
                tmp_40_reg_992 <= tmp_40_fu_735_p2;
                tmp_92_reg_977 <= tmp_92_fu_714_p2;
                tmp_95_reg_982 <= tmp_95_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_i_reg_1002 <= grp_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                x_s_V_reg_879 <= x_s_V_fu_402_p2;
                y_s_V_reg_873 <= y_s_V_fu_396_p2;
            end if;
        end if;
    end process;
    y_V_reg_830(32 downto 0) <= "000000000000000000000000000000000";
    y_V_reg_830(85) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_s_fu_256_p2, tmp_18_fu_262_p2, ap_CS_fsm_state3, exitcond_i_fu_380_p2, tmp_24_fu_413_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_18_fu_262_p2 = ap_const_lv1_1) and (tmp_s_fu_256_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((tmp_18_fu_262_p2 = ap_const_lv1_0) and (tmp_s_fu_256_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_s_fu_256_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_24_fu_413_p2 = ap_const_lv1_1) and (exitcond_i_fu_380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((tmp_24_fu_413_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_fu_380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    NZeros_fu_600_p2 <= std_logic_vector(unsigned(tmp_79_fu_556_p1) + unsigned(tmp_80_fu_596_p1));
    NZeros_i_1_i_fu_606_p3 <= 
        NZeros_fu_600_p2 when (tmp_31_fu_560_p2(0) = '1') else 
        tmp_79_fu_556_p1;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_s_phi_fu_188_p8_assign_proc : process(tmp_s_reg_823, tmp_i_reg_1002, p_s_reg_184, ap_CS_fsm_state40)
    begin
        if (((tmp_s_reg_823 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_phi_mux_p_s_phi_fu_188_p8 <= tmp_i_reg_1002;
        else 
            ap_phi_mux_p_s_phi_fu_188_p8 <= p_s_reg_184;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_p_s_phi_fu_188_p8, ap_CS_fsm_state40, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ap_return <= ap_phi_mux_p_s_phi_fu_188_p8;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    cordic_ctab_table_12_address0 <= tmp_26_fu_408_p1(7 - 1 downto 0);

    cordic_ctab_table_12_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cordic_ctab_table_12_ce0 <= ap_const_logic_1;
        else 
            cordic_ctab_table_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dp_fu_804_p1 <= res_V_fu_797_p3;
    exitcond_i_fu_380_p2 <= "1" when (sh_assign_2_reg_173 = ap_const_lv7_58) else "0";
    isNeg_fu_290_p3 <= r_V_1_fu_268_p2(11 downto 11);
    isneg_fu_519_p3 <= p_Val2_s_reg_141(85 downto 85);
    j_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv32_56) - unsigned(NZeros_i_1_i_reg_934));
    k_fu_386_p2 <= std_logic_vector(unsigned(sh_assign_2_reg_173) + unsigned(ap_const_lv7_1));
    lhs_V_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_210_p4),12));
    loc_V_4_fu_220_p1 <= p_Val2_33_fu_206_p1(52 - 1 downto 0);
    loc_V_5_fu_228_p4 <= p_Val2_34_fu_224_p1(62 downto 52);
    loc_V_6_fu_238_p1 <= p_Val2_34_fu_224_p1(52 - 1 downto 0);
    loc_V_fu_210_p4 <= p_Val2_33_fu_206_p1(62 downto 52);
    man_V_2_fu_782_p2 <= std_logic_vector(shift_left(unsigned(man_V_fu_768_p1),to_integer(unsigned('0' & tmp_42_fu_778_p1(31-1 downto 0)))));
    man_V_fu_768_p1 <= p_Result_s_53_fu_763_p2(52 - 1 downto 0);
    p_Repl2_27_trunc_fu_740_p2 <= std_logic_vector(signed(ap_const_lv11_400) - signed(tmp_81_reg_940));
    
    p_Result_39_fu_576_p5_proc : process(p_Result_5_fu_566_p4)
    begin
        for i in 64 - 1 downto 0 loop
            if (i > 63 or i < 41) then
                p_Result_39_fu_576_p5(i) <= ap_const_lv64_FFFFFFFFFFFFFFFF(i);
            elsif (63 - i >= 23) then
                p_Result_39_fu_576_p5(i) <= '0';
            else
                p_Result_39_fu_576_p5(i) <= p_Result_5_fu_566_p4(63 - i);
            end if;
        end loop;
    end process;

    p_Result_40_fu_745_p4 <= ((isneg_reg_923 & p_Repl2_27_trunc_fu_740_p2) & ap_const_lv52_0);
    p_Result_41_fu_788_p4 <= ((isneg_reg_923 & p_Repl2_27_trunc_fu_740_p2) & man_V_2_fu_782_p2);
    
    p_Result_5_fu_566_p4_proc : process(tmp_187_s_fu_527_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(86+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(86+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(86 - 1 downto 0);
    variable p_Result_5_fu_566_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(86 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(86 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(86 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_16(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_187_s_fu_527_p3;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(86-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(86-1-unsigned(ap_const_lv32_16(7-1 downto 0)));
            for p_Result_5_fu_566_p4_i in 0 to 86-1 loop
                v0_cpy(p_Result_5_fu_566_p4_i) := tmp_187_s_fu_527_p3(86-1-p_Result_5_fu_566_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(86-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_5_fu_566_p4 <= resvalue(23-1 downto 0);
    end process;

    p_Result_s_53_fu_763_p2 <= (tmp_96_fu_757_p2 and tmp_95_reg_982);
        p_Result_s_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_534_p4),64));

    p_Val2_22_ph_fu_372_p3 <= 
        tmp_22_fu_353_p2 when (sel_tmp2_fu_367_p2(0) = '1') else 
        sel_tmp_cast_fu_359_p1;
    p_Val2_2_cast_fu_469_p4 <= cordic_ctab_table_12_q0(125 downto 41);
    p_Val2_33_fu_206_p1 <= x_in;
    p_Val2_34_fu_224_p1 <= y_in;
    p_Val2_42_fu_491_p2 <= std_logic_vector(unsigned(tmp_31_cast_fu_487_p1) + unsigned(p_Val2_2_cast_fu_469_p4));
    p_Val2_43_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_42_reg_913),86));
    r_V_1_fu_268_p2 <= std_logic_vector(unsigned(lhs_V_fu_252_p1) - unsigned(rhs_V_fu_242_p1));
    r_V_2_i_fu_451_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_153) - unsigned(x_s_V_reg_879));
    r_V_3_i_fu_433_p2 <= std_logic_vector(unsigned(p_Val2_37_reg_163) - unsigned(y_s_V_reg_873));
    r_V_4_i_fu_500_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_141) - unsigned(p_Val2_43_cast_fu_497_p1));
    r_V_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv12_1B) + unsigned(rhs_V_fu_242_p1));
    r_V_i1_fu_456_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_153) + unsigned(x_s_V_reg_879));
    r_V_i2_fu_506_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_141) + unsigned(p_Val2_43_cast_fu_497_p1));
    r_V_i_fu_438_p2 <= std_logic_vector(unsigned(p_Val2_37_reg_163) + unsigned(y_s_V_reg_873));
    res_V_fu_797_p3 <= 
        p_Result_40_fu_745_p4 when (tmp_34_reg_951(0) = '1') else 
        p_Result_41_fu_788_p4;
    rhs_V_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_5_fu_228_p4),12));
    sel_tmp1_fu_362_p2 <= (tmp_19_reg_835 xor ap_const_lv1_1);
    sel_tmp2_fu_367_p2 <= (sel_tmp1_fu_362_p2 and isNeg_reg_840);
    sel_tmp_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sel_tmp_reg_850),89));
    sel_tmp_fu_326_p3 <= 
        y_V_fu_274_p4 when (tmp_19_fu_284_p2(0) = '1') else 
        tmp_23_fu_320_p2;
        sh_assign_3_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_fu_304_p3),32));

    sh_assign_fu_304_p3 <= 
        tmp_20_fu_298_p2 when (isNeg_fu_290_p3(0) = '1') else 
        r_V_1_fu_268_p2;
    tmp_16_fu_534_p4 <= tmp_187_s_fu_527_p3(85 downto 23);
    tmp_187_s_fu_527_p3 <= 
        tmp_28_reg_893 when (isneg_fu_519_p3(0) = '1') else 
        p_Val2_s_reg_141;
    tmp_18_fu_262_p2 <= "1" when (loc_V_5_fu_228_p4 = ap_const_lv11_0) else "0";
    tmp_19_fu_284_p2 <= "1" when (loc_V_fu_210_p4 = loc_V_5_fu_228_p4) else "0";
    tmp_20_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(r_V_1_fu_268_p2));
    tmp_21_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_reg_845),89));
    tmp_22_fu_353_p2 <= std_logic_vector(shift_left(unsigned(y_V_cast_fu_347_p1),to_integer(unsigned('0' & tmp_21_fu_350_p1(31-1 downto 0)))));
    tmp_23_fu_320_p2 <= std_logic_vector(shift_right(unsigned(y_V_fu_274_p4),to_integer(unsigned('0' & tmp_24_cast_fu_316_p1(31-1 downto 0)))));
    tmp_24_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_312_p1),86));
    tmp_24_fu_413_p2 <= "1" when (p_Val2_s_reg_141 = ap_const_lv86_0) else "0";
    tmp_25_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_reg_173),89));
    tmp_26_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_2_reg_173),64));
    tmp_28_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv86_0) - unsigned(p_Val2_s_reg_141));
    
    tmp_29_fu_548_p3_proc : process(p_Result_s_fu_544_p1)
    begin
        tmp_29_fu_548_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_s_fu_544_p1(i) = '1' then
                tmp_29_fu_548_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_31_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_479_p3),85));
    tmp_31_fu_560_p2 <= "1" when (tmp_16_fu_534_p4 = ap_const_lv63_0) else "0";
    
    tmp_32_fu_588_p3_proc : process(p_Result_39_fu_576_p5)
    begin
        tmp_32_fu_588_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 64 - 1 downto 0 loop
            if p_Result_39_fu_576_p5(i) = '1' then
                tmp_32_fu_588_p3 <= std_logic_vector(to_unsigned(64-1-i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_34_fu_623_p2 <= "1" when (NZeros_i_1_i_reg_934 = ap_const_lv32_56) else "0";
    tmp_35_fu_628_p2 <= "1" when (signed(j_fu_618_p2) > signed(ap_const_lv32_34)) else "0";
    tmp_36_fu_634_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCC) + signed(j_fu_618_p2));
    tmp_37_fu_640_p3 <= 
        tmp_36_fu_634_p2 when (tmp_35_fu_628_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_38_fu_648_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(j_fu_618_p2));
    tmp_39_fu_730_p2 <= "1" when (signed(j_reg_945) < signed(ap_const_lv32_34)) else "0";
    tmp_40_fu_735_p2 <= std_logic_vector(unsigned(ap_const_lv32_34) - unsigned(j_reg_945));
    tmp_41_fu_772_p3 <= 
        tmp_40_reg_992 when (tmp_39_reg_987(0) = '1') else 
        ap_const_lv32_0;
    tmp_42_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_772_p3),52));
    tmp_77_fu_479_p3 <= cordic_ctab_table_12_q0(40 downto 40);
    tmp_79_fu_556_p1 <= tmp_29_fu_548_p3(32 - 1 downto 0);
    tmp_80_fu_596_p1 <= tmp_32_fu_588_p3(32 - 1 downto 0);
    tmp_81_fu_614_p1 <= NZeros_i_1_i_fu_606_p3(11 - 1 downto 0);
    tmp_82_fu_654_p2 <= "1" when (unsigned(tmp_37_fu_640_p3) > unsigned(tmp_38_fu_648_p2)) else "0";
    tmp_83_fu_660_p1 <= tmp_37_fu_640_p3(7 - 1 downto 0);
    tmp_84_fu_664_p1 <= tmp_38_fu_648_p2(7 - 1 downto 0);
    
    tmp_85_fu_671_p4_proc : process(tmp_V_fu_668_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(87+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(87+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(87 - 1 downto 0);
    variable tmp_85_fu_671_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(87 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(87 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(87 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_56(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_V_fu_668_p1;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(87-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(87-1-unsigned(ap_const_lv32_56(7-1 downto 0)));
            for tmp_85_fu_671_p4_i in 0 to 87-1 loop
                v0_cpy(tmp_85_fu_671_p4_i) := tmp_V_fu_668_p1(87-1-tmp_85_fu_671_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(87-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_85_fu_671_p4 <= resvalue(87-1 downto 0);
    end process;

    tmp_86_fu_681_p2 <= std_logic_vector(unsigned(tmp_83_reg_963) - unsigned(tmp_84_reg_971));
    tmp_87_fu_685_p2 <= std_logic_vector(signed(ap_const_lv7_56) - signed(tmp_83_reg_963));
    tmp_88_fu_690_p2 <= std_logic_vector(unsigned(tmp_84_reg_971) - unsigned(tmp_83_reg_963));
    tmp_89_fu_694_p3 <= 
        tmp_86_fu_681_p2 when (tmp_82_reg_956(0) = '1') else 
        tmp_88_fu_690_p2;
    tmp_90_fu_701_p3 <= 
        tmp_85_fu_671_p4 when (tmp_82_reg_956(0) = '1') else 
        tmp_V_fu_668_p1;
    tmp_91_fu_708_p3 <= 
        tmp_87_fu_685_p2 when (tmp_82_reg_956(0) = '1') else 
        tmp_83_reg_963;
    tmp_92_fu_714_p2 <= std_logic_vector(signed(ap_const_lv7_56) - signed(tmp_89_fu_694_p3));
    tmp_93_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_708_p3),87));
    tmp_94_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_reg_977),87));
    tmp_95_fu_724_p2 <= std_logic_vector(shift_right(unsigned(tmp_90_fu_701_p3),to_integer(unsigned('0' & tmp_93_fu_720_p1(31-1 downto 0)))));
    tmp_96_fu_757_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv87_7FFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_94_fu_754_p1(31-1 downto 0)))));
        tmp_V_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_187_s_reg_929),87));

    tmp_fu_425_p3 <= p_Val2_1_reg_153(88 downto 88);
    tmp_s_fu_256_p2 <= "1" when (unsigned(r_V_fu_246_p2) < unsigned(lhs_V_fu_252_p1)) else "0";
    tx_V_fu_443_p3 <= 
        r_V_3_i_fu_433_p2 when (tmp_fu_425_p3(0) = '1') else 
        r_V_i_fu_438_p2;
    ty_V_fu_461_p3 <= 
        r_V_i1_fu_456_p2 when (tmp_fu_425_p3(0) = '1') else 
        r_V_2_i_fu_451_p2;
    tz_V_fu_512_p3 <= 
        r_V_4_i_fu_500_p2 when (tmp_reg_898(0) = '1') else 
        r_V_i2_fu_506_p2;
    x_V_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_fu_334_p4),89));
    x_V_fu_334_p4 <= ((ap_const_lv1_1 & loc_V_4_reg_818) & ap_const_lv33_0);
    x_s_V_fu_402_p2 <= std_logic_vector(shift_right(signed(p_Val2_37_reg_163),to_integer(unsigned('0' & tmp_25_fu_392_p1(31-1 downto 0)))));
    y_V_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_830),89));
    y_V_fu_274_p4 <= ((ap_const_lv1_1 & loc_V_6_fu_238_p1) & ap_const_lv33_0);
    y_s_V_fu_396_p2 <= std_logic_vector(shift_right(signed(p_Val2_1_reg_153),to_integer(unsigned('0' & tmp_25_fu_392_p1(31-1 downto 0)))));
end behav;
