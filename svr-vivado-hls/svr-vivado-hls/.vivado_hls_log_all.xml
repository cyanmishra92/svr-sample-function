<?xml version="1.0" encoding="UTF-8"?>
<vivadoHLSLog:LogRoot xmlns:vivadoHLSLog="www.xilinx.com/vivadoHLSLog">
  <errorLogs>
    <logs>
      <synLog>
        <logs message="ERROR: [HLS 200-70] Compilation errors found: Pragma processor failed: In file included from samplefunction.cpp:1:&#xA;samplefunction.cpp:11:19: error: use of overloaded operator '/' is ambiguous (with operand types 'typename RType&lt;2, 6, true>::mult' (aka 'ap_fixed_base&lt;mult_w, mult_i, mult_s>') and 'double')&#xA;    return a * PI / 180.0;&#xA;           ~~~~~~ ^ ~~~~~&#xA;...&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:2285: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                              ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:2272: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                 ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:2314: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:2339: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                    ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:2346: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:2371: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                                    ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:2292: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                     ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:2359: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:2298: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:2365: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                              ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:2322: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                   ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:2335: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                ^&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, double)&#xA;    return a * PI / 180.0;&#xA;                  ^&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, long)&#xA;In file included from samplefunction.cpp:1:&#xA;In file included from samplefunction.cpp:1:&#xA;In file included from ./samplefunction.h:4:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/hls_math.h:962:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/hls_hotbm_apfixed.h:41:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_fixed.h:57:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int.h:63:&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:4696:24: error: implicit instantiation of undefined template 'ssdm_int&lt;-2, true>'&#xA;struct ap_fixed_base : ssdm_int&lt;_AP_W, _AP_S> {&#xA;                       ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6949:19: note: in instantiation of template class 'ap_fixed_base&lt;-2, 2, true, 5, 3, 0>' requested here&#xA;struct ap_fixed : ap_fixed_base&lt;_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {&#xA;                  ^&#xA;samplefunction.cpp:43:16: note: in instantiation of template class 'ap_fixed&lt;-2, 2, 5, 3, 0>' requested here&#xA;    angles x = hls::sinf(phi)*hls::cosf(the);&#xA;               ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:215:40: note: template is declared here&#xA;template&lt;int _AP_N, bool _AP_S> struct ssdm_int;&#xA;                                       ^&#xA;In file included from samplefunction.cpp:1:&#xA;samplefunction.cpp:106:43: error: use of overloaded operator '*' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;    angles n = (tileSize * (index%3)) + y * tileSize -1;&#xA;                                        ~ ^ ~~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:1592: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:1583: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:1611: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:1628: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:1633: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:1650: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:1597: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:1642: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:1601: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:1646: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:1617: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:1626: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, double)&#xA;    angles n = (tileSize * (index%3)) + y * tileSize -1;&#xA;                                          ^&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, long)&#xA;samplefunction.cpp:107:42: error: use of overloaded operator '*' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;    angles m = (tileSize * vertical) + x * tileSize -1;&#xA;                                       ~ ^ ~~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:1592: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:1583: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:1611: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:1628: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:1633: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:1650: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:1597: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:1642: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:1601: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:1646: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:1617: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:1626: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, double)&#xA;    angles m = (tileSize * vertical) + x * tileSize -1;&#xA;                                         ^&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, long)&#xA;samplefunction.cpp:109:16: error: assigning to 'indexes *' (aka 'ap_fixed&lt;4, 6> *') from incompatible type 'angles' (aka 'ap_fixed&lt;2, 6>')&#xA;    result [0] = n;&#xA;               ^ ~&#xA;samplefunction.cpp:110:16: error: assigning to 'indexes *' (aka 'ap_fixed&lt;4, 6> *') from incompatible type 'angles' (aka 'ap_fixed&lt;2, 6>')&#xA;    result [1] = m;&#xA;               ^ ~&#xA;samplefunction.cpp:196:30: error: use of overloaded operator '+' is ambiguous (with operand types 'typename RType&lt;2, 6, true>::div' (aka 'ap_fixed_base&lt;div_w, div_i, div_s>') and 'float')&#xA;    u = 0.5f * (uc / maxAxis + 1.0f);&#xA;                ~~~~~~~~~~~~ ^ ~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, float)&#xA;    u = 0.5f * (uc / maxAxis + 1.0f);&#xA;                             ^&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, unsigned int)&#xA;samplefunction.cpp:197:30: error: use of overloaded operator '+' is ambiguous (with operand types 'typename RType&lt;2, 6, true>::div' (aka 'ap_fixed_base&lt;div_w, div_i, div_s>') and 'float')&#xA;    v = 0.5f * (vc / maxAxis + 1.0f);&#xA;                ~~~~~~~~~~~~ ^ ~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, float)&#xA;    v = 0.5f * (vc / maxAxis + 1.0f);&#xA;                             ^&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, unsigned int)&#xA;samplefunction.cpp:248:39: error: conditional expression is ambiguous; 'typename ap_fixed_base&lt;2, 6, true>::RType&lt;32, 32, true>::plus' (aka 'ap_fixed_base&lt;plus_w, plus_i, plus_s>') can be converted to 'angles' (aka 'ap_fixed&lt;2, 6>') and vice versa&#xA; spherical2cartesian(toRadian((j &lt; 0) ? j + 360 : j), toRadian((i &lt; 0) ? i + 180 : i),p1);&#xA;                                      ^ ~~~~~~~   ~&#xA;samplefunction.cpp:268:9: error: use of overloaded operator '+=' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;       j+= 0.05859;&#xA;       ~^  ~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:9089: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:9045: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:9241: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:9341: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:9355: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:9455: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:9103: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:9399: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:9131: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:9427: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:9243: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:9287: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^&#xA;In file included from samplefunction.cpp:1:&#xA;samplefunction.cpp:271:8: error: use of overloaded operator '+=' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;      i+= 0.08789;&#xA;      ~^  ~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:9089: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:9045: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:9241: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:9341: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:9355: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:9455: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:9103: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:9399: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:9131: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:9427: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:9243: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:9287: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxxxxxA;11 errors generated.&#xA;Failed checking during preprocessing.&#xA;    while executing&#xA;&quot;source /home/rhein/Desktop/svr-sample-function/svr-vivado-hls/svr-vivado-hls/solution1/csynth.tcl&quot;&#xA;    invoked from within&#xA;&quot;hls::main /home/rhein/Desktop/svr-sample-function/svr-vivado-hls/svr-vivado-hls/solution1/csynth.tcl&quot;&#xA;    (&quot;uplevel&quot; body line 1)&#xA;    invoked from within&#xA;&quot;uplevel 1 hls::main {*}$args&quot;&#xA;    (procedure &quot;hls_proc&quot; line 5)&#xA;    invoked from within&#xA;&quot;hls_proc $argv&quot;&#xA;" projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:08:27.666-0400"/>
      </synLog>
      <simLog/>
      <mgLog/>
      <packageLog/>
      <csimLog>
        <logs message="ERROR: [SIM 211-100] CSim file generation failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:21:23.799-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim file generation failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:20:32.645-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim file generation failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:19:28.467-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim file generation failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:18:59.172-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim file generation failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:18:18.427-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim failed with errors." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:15:40.900-0400"/>
        <logs message="@E Simulation failed." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:15:40.861-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim failed with errors." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:06:30.697-0400"/>
        <logs message="@E Simulation failed." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T23:06:30.658-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim failed with errors." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:57:21.161-0400"/>
        <logs message="@E Simulation failed." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:57:21.116-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim failed with errors." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:51:58.938-0400"/>
        <logs message="@E Simulation failed." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:51:58.881-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim failed with errors." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:49:38.926-0400"/>
        <logs message="@E Simulation failed." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:49:38.877-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim failed with errors." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:44:42.614-0400"/>
        <logs message="@E Simulation failed." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:44:42.528-0400"/>
        <logs message="ERROR: [SIM 211-100] CSim failed with errors." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:39:16.322-0400"/>
        <logs message="@E Simulation failed." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:39:16.276-0400"/>
        <logs message="ERROR: [SIM 211-100] 'csim_design' failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:35:02.207-0400"/>
        <logs message="ERROR: [SIM 211-100] 'csim_design' failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:32:00.314-0400"/>
        <logs message="ERROR: [SIM 211-100] 'csim_design' failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:29:32.756-0400"/>
        <logs message="ERROR: [SIM 211-100] 'csim_design' failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:24:11.296-0400"/>
        <logs message="ERROR: [SIM 211-100] 'csim_design' failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:19:25.663-0400"/>
        <logs message="ERROR: [SIM 211-100] 'csim_design' failed: compilation error(s)." projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:16:24.746-0400"/>
      </csimLog>
    </logs>
  </errorLogs>
  <warningLogs>
    <logs>
      <synLog>
        <logs message="WARNING: [HLS 200-40] In file included from samplefunction.cpp:1:&#xA;samplefunction.cpp:11:19: error: use of overloaded operator '/' is ambiguous (with operand types 'typename RType&lt;2, 6, true>::mult' (aka 'ap_fixed_base&lt;mult_w, mult_i, mult_s>') and 'double')&#xA;    return a * PI / 180.0;&#xA;           ~~~~~~ ^ ~~~~~&#xA;...&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:2285: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                              ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:2272: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                 ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:2314: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:2339: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                    ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:2346: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:2371: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                                    ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:2292: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                     ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:2359: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:2298: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:2365: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                              ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:2322: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                   ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:2335: note: candidate function [with _AP_W = 4, _AP_I = 12, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xA;                                                                                                                                                                                                                                                                                                ^&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, double)&#xA;    return a * PI / 180.0;&#xA;                  ^&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(unsigned int, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(double, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(float, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, long double)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(int, float)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, unsigned long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, unsigned long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, unsigned int)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, long long)&#xA;samplefunction.cpp:11:19: note: built-in candidate operator/(long double, long)&#xA;In file included from samplefunction.cpp:1:&#xA;In file included from samplefunction.cpp:1:&#xA;In file included from ./samplefunction.h:4:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/hls_math.h:962:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/hls_hotbm_apfixed.h:41:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_fixed.h:57:&#xA;In file included from /home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int.h:63:&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:4696:24: error: implicit instantiation of undefined template 'ssdm_int&lt;-2, true>'&#xA;struct ap_fixed_base : ssdm_int&lt;_AP_W, _AP_S> {&#xA;                       ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6949:19: note: in instantiation of template class 'ap_fixed_base&lt;-2, 2, true, 5, 3, 0>' requested here&#xA;struct ap_fixed : ap_fixed_base&lt;_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {&#xA;                  ^&#xA;samplefunction.cpp:43:16: note: in instantiation of template class 'ap_fixed&lt;-2, 2, 5, 3, 0>' requested here&#xA;    angles x = hls::sinf(phi)*hls::cosf(the);&#xA;               ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:215:40: note: template is declared here&#xA;template&lt;int _AP_N, bool _AP_S> struct ssdm_int;&#xA;                                       ^&#xA;In file included from samplefunction.cpp:1:&#xA;samplefunction.cpp:106:43: error: use of overloaded operator '*' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;    angles n = (tileSize * (index%3)) + y * tileSize -1;&#xA;                                        ~ ^ ~~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:1592: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:1583: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:1611: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:1628: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:1633: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:1650: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:1597: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:1642: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:1601: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:1646: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:1617: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:1626: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, double)&#xA;    angles n = (tileSize * (index%3)) + y * tileSize -1;&#xA;                                          ^&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(unsigned int, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(double, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(float, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, long double)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(int, float)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, unsigned long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, unsigned long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, unsigned int)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, long long)&#xA;samplefunction.cpp:106:43: note: built-in candidate operator*(long double, long)&#xA;samplefunction.cpp:107:42: error: use of overloaded operator '*' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;    angles m = (tileSize * vertical) + x * tileSize -1;&#xA;                                       ~ ^ ~~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:1592: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:1583: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:1611: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:1628: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:1633: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:1650: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:1597: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:1642: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:1601: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:1646: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:1617: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:1626: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, double)&#xA;    angles m = (tileSize * vertical) + x * tileSize -1;&#xA;                                         ^&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(unsigned int, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(double, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(float, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, long double)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(int, float)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, unsigned long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, unsigned long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, unsigned int)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, long long)&#xA;samplefunction.cpp:107:42: note: built-in candidate operator*(long double, long)&#xA;samplefunction.cpp:109:16: error: assigning to 'indexes *' (aka 'ap_fixed&lt;4, 6> *') from incompatible type 'angles' (aka 'ap_fixed&lt;2, 6>')&#xA;    result [0] = n;&#xA;               ^ ~&#xA;samplefunction.cpp:110:16: error: assigning to 'indexes *' (aka 'ap_fixed&lt;4, 6> *') from incompatible type 'angles' (aka 'ap_fixed&lt;2, 6>')&#xA;    result [1] = m;&#xA;               ^ ~&#xA;samplefunction.cpp:196:30: error: use of overloaded operator '+' is ambiguous (with operand types 'typename RType&lt;2, 6, true>::div' (aka 'ap_fixed_base&lt;div_w, div_i, div_s>') and 'float')&#xA;    u = 0.5f * (uc / maxAxis + 1.0f);&#xA;                ~~~~~~~~~~~~ ^ ~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, float)&#xA;    u = 0.5f * (uc / maxAxis + 1.0f);&#xA;                             ^&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, float)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned int, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(unsigned long long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(double, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(float, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, unsigned int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, int)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(int, long double)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, unsigned long long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, unsigned long)&#xA;samplefunction.cpp:196:30: note: built-in candidate operator+(long double, unsigned int)&#xA;samplefunction.cpp:197:30: error: use of overloaded operator '+' is ambiguous (with operand types 'typename RType&lt;2, 6, true>::div' (aka 'ap_fixed_base&lt;div_w, div_i, div_s>') and 'float')&#xA;    v = 0.5f * (vc / maxAxis + 1.0f);&#xA;                ~~~~~~~~~~~~ ^ ~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:201: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xA;                                                                                                                                                                                                        ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:202: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xA;                                                                                                                                                                                                         ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:203: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xA;                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:204: note: candidate function [with _AP_W = 3, _AP_I = 3, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                           ^&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, float)&#xA;    v = 0.5f * (vc / maxAxis + 1.0f);&#xA;                             ^&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, float)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned int, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(unsigned long long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(double, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(float, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, unsigned int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, int)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(int, long double)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, unsigned long long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, unsigned long)&#xA;samplefunction.cpp:197:30: note: built-in candidate operator+(long double, unsigned int)&#xA;samplefunction.cpp:248:39: error: conditional expression is ambiguous; 'typename ap_fixed_base&lt;2, 6, true>::RType&lt;32, 32, true>::plus' (aka 'ap_fixed_base&lt;plus_w, plus_i, plus_s>') can be converted to 'angles' (aka 'ap_fixed&lt;2, 6>') and vice versa&#xA; spherical2cartesian(toRadian((j &lt; 0) ? j + 360 : j), toRadian((i &lt; 0) ? i + 180 : i),p1);&#xA;                                      ^ ~~~~~~~   ~&#xA;samplefunction.cpp:268:9: error: use of overloaded operator '+=' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;       j+= 0.05859;&#xA;       ~^  ~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:9089: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:9045: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:9241: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:9341: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:9355: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:9455: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:9103: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:9399: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:9131: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:9427: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:9243: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:9287: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxxxxxA;In file included from samplefunction.cpp:1:&#xA;samplefunction.cpp:271:8: error: use of overloaded operator '+=' is ambiguous (with operand types 'angles' (aka 'ap_fixed&lt;2, 6>') and 'double')&#xA;      i+= 0.08789;&#xA;      ~^  ~~~~~~~&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6526:9089: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator + (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::plus operator + ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator - (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::minus operator - ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator * (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::mult operator * ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_bas&#xA;e&lt;1,1,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator / (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::div operator / ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >> (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt; (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator &amp; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O,&#xA; _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator | (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator | ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^ (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;1,1,false>::logic operator ^ ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator == (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator == (op); } template&lt;int _AP_W, in&#xA;t _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator != (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator > (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt; (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((alwa&#xA;ys_inline)) bool operator &lt; ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( bool i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;1,1,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator += (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator -= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator *= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator /= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _A&#xA;P_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator >>= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator &amp;= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator |= (ap_fixed_base&lt;1,1,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, bool i_op) { return op.operator ^= (ap_fixed_base&lt;1,1,false>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6527:9045: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>&#xA;(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP&#xA;_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( char i_op, &#xA;const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6528:9241: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator + (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::plus operator + ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator - (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::minus operator - ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator * (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::mult operator * ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _A&#xA;P_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator / (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::div operator / ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >> (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator &amp; ( signed &#xA;char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator | (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator | ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,true>::logic operator ^ ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator == (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _&#xA;AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator != (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator > (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt; (ap_fixed_base&lt;&#xA;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator += (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; &#xA;operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator >>= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6529:9341: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator + (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::plus operator + ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator - (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::minus operator - ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator * (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::mult operator * ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_&#xA;I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator / (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::div operator / ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >> (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt; (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template&#xA; RType&lt;8,8,false>::logic operator &amp; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator | (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator | ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^ (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;8,8,false>::logic operator ^ ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator == (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsi&#xA;gned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator != (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator > (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I&#xA;,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt; (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned char i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;8,8,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator += (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator -= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator *= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _&#xA;AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator /= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator >>= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator &amp;= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator |= (ap_fixed_base&lt;8,8,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned char i_op) { return op.operator ^= (ap_fixed_base&lt;8,8,false>(i_op)); }&#xxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6530:9355: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator + (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::plus operator + ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator - (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::minus operator - ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator * (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::mult operator * ( signed short i_op, const ap_fixed_base&lt;_AP_W&#xA;,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator / (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::div operator / ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >> (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>:&#xA;:template RType&lt;16,16,true>::logic operator &amp; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator | (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator | ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,true>::logic operator ^ ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator == (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool oper&#xA;ator == ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator != (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator > (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_bas&#xA;e&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( signed short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator += (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator *= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_&#xA;Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator >>= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, signed short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,true>(i_op)); }&#xxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6531:9455: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator + (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::plus operator + ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator - (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::minus operator - ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator * (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::mult operator * ( unsigned short i_op, co&#xA;nst ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator / (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::div operator / ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >> (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt; (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)&#xA;) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator &amp; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator | (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator | ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^ (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;16,16,false>::logic operator ^ ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator == (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mod&#xA;e _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator != (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator > (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_&#xA;O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt; (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned short i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;16,16,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator += (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator -= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return o&#xA;p.operator *= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator /= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator >>= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator &amp;= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator |= (ap_fixed_base&lt;16,16,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned short i_op) { return op.operator ^= (ap_fixed_base&lt;16,16,fal&#xA;se>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6532:9103: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator + (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::plus operator + ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator - (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::minus operator - ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator * (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::mult operator * ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixe&#xA;d_base&lt;32,32,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator / (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::div operator / ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >> (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator &amp; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP&#xA;_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator | (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator | ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,true>::logic operator ^ ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator == (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator == (op); } template&#xA;&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator != (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator > (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __att&#xA;ribute__((always_inline)) bool operator &lt; ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator += (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int&#xA; _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator >>= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,true>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6533:9399: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator + (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::plus operator + ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator - (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::minus operator - ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator * (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::mult operator * ( unsigned int i_op, const ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator / (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::div operator / ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >> (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt; (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_ba&#xA;se&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator &amp; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator | (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator | ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^ (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;32,32,false>::logic operator ^ ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator == (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attri&#xA;bute__((always_inline)) bool operator == ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator != (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator > (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inlin&#xA;e)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt; (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned int i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;32,32,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator += (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator -= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator *= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;i&#xA;nt _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator /= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator >>= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator &amp;= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator |= (ap_fixed_base&lt;32,32,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned int i_op) { return op.operator ^= (ap_fixed_base&lt;32,32,false>(i_op)); }&#xxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6535:9131: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return a&#xA;p_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP&#xA;_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator =&#xA;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O&#xA;, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator /= (ap_fixed_base&lt;64&#xA;,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6536:9427: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( unsigned long i_op, const ap&#xA;_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename &#xA;ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_&#xA;N> inline __attribute__((always_inline)) bool operator == ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __a&#xA;ttribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( unsigned long i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator *= (ap_fixed_base&lt;64&#xA;,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, unsigned long i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^&#xA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6541:9243: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator + (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::plus operator + ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator - (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::minus operator - ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator * (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::mult operator * ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O&#xA;, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator / (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::div operator / ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >> (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator &#xA;&amp; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator | (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator | ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,true>::logic operator ^ ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator == (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q&#xA;, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator != (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator > (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt; (ap_fixed_ba&#xA;se&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_slong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,true>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator += (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; o&#xA;perator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator >>= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,true>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_slong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,true>(i_op)); }&#xxxxxxA;/home/rhein/Desktop/CP210/vivado/Vivado/2018.2/common/technology/autopilot/ap_int_syn.h:6542:9287: note: candidate function [with _AP_W = 2, _AP_I = 6, _AP_S = true, _AP_Q = 5, _AP_O = 3, _AP_N = 0]&#xA;template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator + (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::plus operator + ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator + (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator - (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::minus operator - ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator - (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator * (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::mult operator * ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,&#xA;_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator * (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator / (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::div operator / ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator / (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator >> ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >> (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::arg1 operator &lt;&lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt; (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator &amp; ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,&#xA;false>::logic operator &amp; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &amp; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator | (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator | ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator | (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^ (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base&lt;_AP_W,_AP_I,_AP_S>::template RType&lt;64,64,false>::logic operator ^ ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator ^ (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator == (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator == ( ap_ulong i_op, const ap_f&#xA;ixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator == (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator != (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator != ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator != (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator > (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator > ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator > (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator >= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i&#xA;_op) { return op.operator &lt; (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt; ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt; (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( const ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator &lt;= ( ap_ulong i_op, const ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op) { return ap_fixed_base&lt;64,64,false>(i_op).operator &lt;= (op); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator += ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator += (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator -= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator -= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator *= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator *= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed&#xA;_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator /= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator /= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator >>= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator >>= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; operator &lt;&lt;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q,_AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &lt;&lt;= (ap_int_base&lt;64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator &amp;= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator &amp;= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator |= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator |= (ap_fixed_base&lt;64,64,false>(i_op)); } template&lt;int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base&lt;_AP_W,_AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; operator ^= ( ap_fixed_base&lt;_AP_W, _AP_I,_AP_S,_AP_Q, _AP_O, _AP_N>&amp; op, ap_ulong i_op) { return op.operator ^= (ap_fixed_base&lt;64,64,false>(i_op)); }&#xA;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &#xxxxxA;11 errors generated.\n" projectName="svr-vivado-hls" solutionName="solution1" date="2018-07-16T22:08:26.543-0400" type="Warning"/>
      </synLog>
      <simLog/>
      <mgLog/>
      <packageLog/>
      <csimLog/>
    </logs>
  </warningLogs>
</vivadoHLSLog:LogRoot>
